hydra:
  run:
    dir: outputs/${hydra.job.name}/${now:%Y-%m-%d_%H-%M-%S}
  sweep:
    dir: outputs/${hydra.job.name}/${now:%Y-%m-%d_%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: quantgpt
    header: == ${hydra.help.app_name} ==
    footer: Use --hydra-help to view Hydra specific help
    template: '${hydra.help.header}


      This is ${hydra.help.app_name}!

      You can choose a db driver by appending

      == Configuration groups ==

      Compose your configuration from those groups (db=mysql)


      $APP_CONFIG_GROUPS


      == Config ==

      This is the config generated for this run.

      You can override everything, for example:

      python my_app.py db.user=foo db.pass=bar

      -------

      $CONFIG

      -------


      ${hydra.help.footer}'
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      color:
        (): colorlog.ColoredFormatter
        format: '[ %(cyan)s%(asctime)s %(reset)s][%(name)s][%(log_color)s%(levelname)s%(reset)s]
          - %(log_color)s%(message)s%(reset)s'
        reset: true
        log_colors:
          DEBUG: cyan
          INFO: green
          WARNING: yellow
          ERROR: bold_red
          CRITICAL: bold_purple
    handlers:
      console:
        class: logging.StreamHandler
        formatter: color
        stream: ext://sys.stdout
      jobfile:
        class: logging.handlers.WatchedFileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/log.txt
    root:
      handlers:
      - console
      - jobfile
    disable_existing_loggers: false
  env: {}
  mode: RUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=RUN
    task:
    - command=bench
  job:
    name: main
    chdir: null
    override_dirname: command=bench
    id: ???
    num: ???
    config_name: config.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/kuhmichel/git/eki-transformer-dev/quantgpt
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/kuhmichel/git/eki-transformer-dev/quantgpt/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: /home/kuhmichel/git/eki-transformer-dev/quantgpt/outputs/main/2023-09-16_11-40-04
    choices:
      command: bench
      train: default
      dataset: openwebtext
      dataset/tokenizer: tiktoken
      model: gpt_2_small
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: custom
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: main
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
