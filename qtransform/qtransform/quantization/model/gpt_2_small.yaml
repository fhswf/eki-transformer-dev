cls: gpt ## has to match cls in config for qtransform.model ? it is arbitrary, as the model is passed to the quantizer during training
#containers:
#  #TODO: make config apply for all layers within container ModuleList or ModuleConfig
#  #idea: regex within name
#  #! marks start and end of regex
#  transformer.layer.![0-9]!.mlp.c_fc:
#    quantize: True
#    layer_type: Linear
layers:
  #<module>.<submodule>.<submodule>.<quantized_layer>
  #-> quantized layer at the bottom, always
  transformer.wte: #name of layer
    #quantize: True #assume that layer should be quantized if it is in config
    layer_type: Embedding
    quantizers: 
      weight: 
        #type: weight
        #order of overriding: default_quantizer, then template, then args
        default_quantizer: Int8WeightPerTensorFloat
        template: weight_round_minmax  #config in yaml files under ./templates
        args:
          quant_type : INT #Integer, binary, ternary, fixed point integer
          bit_width_impl_type : CONST #is the bit width backpropagated and optimised
          float_to_int_impl_type : ROUND #how should the quantized values be clipped to fit into the quantized datatype
          narrow_range : TRUE #clip max value of data type (e.g. for 8 bits: -128:127 instead of -127:127)
          signed : True #can quantized values take on negative values
          zero_point_impl : ZeroZeroPoint #how is zero point infered

          scaling_impl_type : STATS #how the scale qparam should be calculated, for now: from statistics (weight tensors of layer)

          #attributes only applied when scaling_impl_type is statistics
          scaling_stats_op : MIN_MAX #max value, minmax etc.
          scaling_min_val : 1e-10 #minimum value that the scale is going to have during calibration

          scaling_per_output_channel : True #per tensor or per channel quantization
          restrict_scaling_type : FP #restrict range of values that scale qparam can have

          #test if args from template are really applied
          #bit_width : 6 #bit width of quantized values

  transformer.layer.1.attn.mha:
    quantize: True
    layer_type: MultiheadAttention
    quantizers: 
      weight:
        type: weight #if unspecified, infer type from name 
        default_quantizer: Int8WeightPerTensorFloat
        template: ""
        args:
      in_proj_weight_quant: #mha has multiple weight quantizers, each having a different name (in_proj_weight_quant, out_proc_weight_quant)
        type: weight
        default_quantizer: Int8WeightPerTensorFloat
        template: ""
        args:
  transformer.layer.1.mlp.c_fc:
    quantize: True
    layer_type: Linear
  transformer.layer.1.mlp.c_proj:
    quantize: True
    layer_type: Linear
  transformer.layer.1.mlp.active:
    quantize: True
    layer_type: ReLU