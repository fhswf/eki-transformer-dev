#model does not have activation functions as names
        self.model = nn.ModuleDict(dict(
            conv1 = nn.Conv2d(1, 32, 3, 1),
            relu1 = nn.ReLU(),
            conv2 = nn.Conv2d(32, 64, 3, 1),
            relu2 = nn.ReLU(),
            maxpool2d = nn.MaxPool2d(kernel_size=2),
            dropout1 = nn.Dropout(0.25),
            flatten = nn.Flatten(),
            fc1 = nn.Linear(9216, 128),
            relu3 = nn.ReLU(),
            dropout2 = nn.Dropout(0.5),
            fc2 = nn.Linear(128, 10)
        ))

name: mnist
modules:
  model: #name of submodule
    wte: #name of layer
      quantize: True
      #quantization for different kinds, e.g. weight
      #not all layers support quantization of all kinds, e.g. activation functions do not have weight quantization
      weight: 
        #order of overriding: default_quantizer, then template, then args
        default_quantizer: Int8WeightPerTensorFloat
        template: "" #config in yaml files under ./templates
        args:
          quant_type : INT #Integer, binary, ternary, fixed point integer
          bit_width_impl_type : CONST #is the bit width backpropagated and optimised
          float_to_int_impl_type : ROUND #how should the quantized values be clipped to fit into the quantized datatype
          narrow_range : TRUE #clip max value of data type (e.g. for 8 bits: -128:127 instead of -127:127)
          signed : True #can quantized values take on negative values
          #zero_point_impl : ZeroZeroPoint #how is zero point infered

          scaling_impl_type : STATS #how the scale qparam should be calculated, for now: from statistics (weight tensors of layer)

          #attributes only applied when scaling_impl_type is statistics
          scaling_stats_op : MIN_MAX #max value, minmax etc.
          scaling_min_val : 1e-10 #minimum value that the scale is going to have during calibration

          scaling_per_output_channel : True #per tensor or per channel quantization
          restrict_scaling_type : FP #restrict range of values that scale qparam can have
          bit_width : 6 #bit width of quantized values
    gelu:
      quantize: True
      act:
        default_quantizer: Int8ActPerTensorFloat
        template: "" 
        args:
          min_val: 0.0
          max_val: 100.0